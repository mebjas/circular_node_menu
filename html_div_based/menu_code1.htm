<!DOCTYPE html>
<html>
<head>
<title>canvas example 2</title>
<script src="js/jquery.js"></script>
<body>

<canvas id="myCanvas" width="1100" height="500" style="border:1px solid #d3d3d3;" ondblclick="redraw(event)">
Your browser does not support the HTML5 canvas tag.</canvas>

<script>
//color codes===========
var color = new Array();
color[0] = "red";
color[1] = "blue";
color[2] = "yellow";
color[3] = "green";
color[4] = "lightBlue";
color[5] = "yellowGreen";
color[6] = "orange";
color[7] = "pink";
//color codes end here====
var c = document.getElementById("myCanvas");
var ctx = c.getContext("2d");
//=============variables=====
var x = 150;
var y = c.height / 2;
var r1 = 75;
var r2 = 150;
var dr = 4;
var dr4 = 3;
var r3 = 200;
var theta1 = 60;
var node1 = new Array();
var rnode = 5;
	node1[0] = new Array();
	node1[0][0] = x + r1;
	node1[0][1] = y;
	node1[0][2] = true;
	node1[0][3] = true;
var node2 = new Array();
var dtheta1 = 2;
var dtheta2 = 30;
var dtheta3 = Math.PI/8;	//half angle of node1
var error1 = 5;			//error in joining node1 to node2
var nodeJoint = 0;		//no of items connected to node2
var d = 400;
var w = 100;
var node3 = new Array();	//array of node point of item
var h1 = 100;
var margin = 10;
var h = 50;
var width = 100;
var width1 = 30;
//========varibles till here=====================


function draw()
{
	ctx.beginPath();
	ctx.arc(x,y,r1,0,Math.PI*2,true);
	//ctx.moveTo(x,y);
	ctx.arc(x,y,r1+dr4,0,Math.PI*2,true);
	ctx.moveTo(x+r2*Math.cos(Math.PI / 6),y-r2*Math.sin(Math.PI/6));
	ctx.arc(x,y,r2,-Math.PI / 6 , Math.PI/6,false);
	ctx.moveTo(x+(r2+dr)*Math.cos(Math.PI / 6),y-(r2+dr)*Math.sin(Math.PI/6));
	ctx.arc(x,y,r2+dr,-Math.PI / 6 , Math.PI/6,false);
	//================================================
	ctx.moveTo(x+r3*Math.cos(Math.PI / 6),y-r3*Math.sin(Math.PI/6));
	ctx.arc(x,y,r3,-Math.PI / 6 , Math.PI/6 +(dtheta2/180 * Math.PI),false);
	ctx.moveTo(x+(r3+dr)*Math.cos(Math.PI / 6),y-(r3+dr)*Math.sin(Math.PI/6));
	ctx.arc(x,y,r3+dr,-Math.PI / 6 , Math.PI/6 +(dtheta2/180 * Math.PI),false);
	drawNodes();
	drawSubnodes();
	drawItems();
	ctx.stroke();
	
}
function drawNodes()
{
	//ctx.beginPath();
	
	var i;
	for(i = 0;i<node1.length;i++)
	{
		ctx.moveTo(node1[i][0],node1[i][1]);
		ctx.arc(node1[i][0],node1[i][1],rnode,0,Math.PI*2,true);
		if(node1[i][2])
		{
			ctx.moveTo(node1[i][0],node1[i][1]);
			ctx.lineTo(x+r1 + (r3-r1+error1)*Math.cos(dtheta3),y - (r3-r1+error1)*Math.sin(dtheta3));
			var pos = node2.length;
			node2[pos] = new Array();
			node2[pos][0] = x+r1 + (r3-r1+error1)*Math.cos(dtheta3);
			node2[pos][1] = y - (r3-r1+error1)*Math.sin(dtheta3);
			ctx.moveTo(node1[i][0],node1[i][1]);
			ctx.lineTo(x+r1 + (r3-r1+error1)*Math.cos(dtheta3 + dtheta1/180*Math.PI),y - (r3-r1+error1)*Math.sin(dtheta3 + dtheta1/180*Math.PI));
		}
		if(node1[i][3])
		{
			ctx.moveTo(node1[i][0],node1[i][1]);
			ctx.lineTo(x+r1 + (r3-r1+error1)*Math.cos(-dtheta3),y - (r3-r1+error1)*Math.sin(-dtheta3));
			var pos = node2.length;
			node2[pos] = new Array();
			node2[pos][0] = x+r1 + (r3-r1+error1)*Math.cos(-dtheta3);
			node2[pos][1] = y - (r3-r1+error1)*Math.sin(-dtheta3);
			ctx.moveTo(node1[i][0],node1[i][1]);
			ctx.lineTo(x+r1 + (r3-r1+error1)*Math.cos(-(dtheta3 + dtheta1/180*Math.PI)),y - (r3-r1+error1)*Math.sin(-(dtheta3+ dtheta1/180*Math.PI)));
		}
	}
	//ctx.stroke();
}
function drawSubnodes()
{
	var i
	for(i=0;i<node2.length;i++)
	{
		ctx.moveTo(node2[i][0],node2[i][1]);
		ctx.arc(node2[i][0],node2[i][1],rnode,0,Math.PI*2,true);
	}
}
function drawItems()
{
	var i;
	for(i=0;i<nodeJoint;i++)
	{
		drawPolygon(node3[i]);
		ctx.moveTo(node3[i][0],node3[i][1]);
		ctx.lineTo(node3[i][0]-w,node3[i][1]);
		ctx.lineTo(node2[parseInt(i/2)][0],node2[parseInt(i/2)][1]);
	}
}
function drawPolygon(obj)
{
	ctx.moveTo(obj[0],obj[1]);
	ctx.lineTo(obj[0]+width1,obj[1]-h/2);
	ctx.lineTo(obj[0]+width1+width,obj[1]-h/2);
	ctx.lineTo(obj[0]+2*width1+width,obj[1]);
	ctx.lineTo(obj[0]+width1+width,obj[1]+h/2);
	ctx.lineTo(obj[0]+width1,obj[1]+h/2);
	ctx.lineTo(obj[0],obj[1]);	
}
function createSubNode()
{
	var pos = node2.length;
	var nodepos = parseInt(pos/2);
	if(nodepos > node1.length)
	{
		createNode();
	}
}
function createNode()
{
	//function to create a new node
	var pos = node1.length;
	var subpos;
	node1[pos] = new Array();
	var tmptheta = pos * Math.PI/3;
	node1[pos][0] = x + r1*Math.cos(-tmptheta);
	node1[pos][1] = y + r1*Math.sin(-tmptheta);
		subpos = node2.length;
		node2[subpos][0] = node1[pos][0] + (r3-r1+error1)*Math.cos(-pos*Math.PI/6);
		node2[subpos][1] = node1[pos][1] - (r3-r1+error1)*Math.sin(-pos*Math.PI/6);
		node1[pos][2] = true;
		subpos = node2.length;
		node2[subpos][0] = node1[pos][0] + (r3-r1+error1)*Math.cos(-pos*Math.PI/2);
		node2[subpos][1] = node1[pos][1] - (r3-r1+error1)*Math.sin(-pos*Math.PI/2);
		node1[pos][3] = true;
	
}
function addItem()
{
	nodeJoint++;	//test case
	node3[nodeJoint-1] = new Array();
	node3[nodeJoint-1][0] = x + d + w;
	node3[nodeJoint-1][1] = h1 + (2*nodeJoint - 1)*margin + (nodeJoint-(1/2))*h;
	for(var i=0;i<nodeJoint;i++){console.log(node3[i][0] +"," +node3[i][1]);}
	clr();
	draw();
}
function deleteItem()
{
	nodeJoint--;
	clr();
	draw();
}
function clr(){
	ctx.clearRect(0,0,c.width,c.height);
}
draw();
function redraw(e)
{
	x = e.clientX;
	y = e.clicntY;
	clr();
	draw();
}
</script> 
<button onclick="clr();">clear</button>
<button onclick="draw();">draw</button>
<button onclick="addItem();">add</button>
<button onclick="deleteItem();">delete</button>
</body>
</head>
</html>